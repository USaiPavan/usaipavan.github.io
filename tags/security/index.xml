<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sai Pavan&#39;s blog</title>
    <link>https://usaipavan.github.io/tags/security/index.xml</link>
    <description>Recent content on Sai Pavan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2016 Sai Pavan.</copyright>
    <atom:link href="https://usaipavan.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Practical implementation of fix for XSS vulnerability</title>
      <link>https://usaipavan.github.io/2012/01/practical-implementation-of-fix-for-xss-vulnerability/</link>
      <pubDate>Thu, 05 Jan 2012 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2012/01/practical-implementation-of-fix-for-xss-vulnerability/</guid>
      <description>&lt;p&gt;In this post, I am going to discuss about the practical way of fixing the XSS vulnerability in ASP.NET applications. An introduction about XSS vulnerability can be found here. So, why I chose to write this blog post. I happened to see quite a few blog posts and sites which discuss about fixing the XSS vulnerability by constraining the input and encoding the output. But, I felt that there is a gap between practical implementation of the suggestion and what is written in the web sites.&lt;/p&gt;

&lt;p&gt;Now lets discuss briefly about how we would be going ahead and fixing this issue. As this &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff649310.aspx&#34;&gt;link&lt;/a&gt; suggests the simple approach for this security vulnerability is constrain the input and encode the output. Its simple when on an article but during implementation we will face some issues. I will put forward one such issue. Lets go ahead with the suggestion of constraining the input. Following the basic rule of implementing Regex/Custom validator with ClientScript enabled and having the ServerValidate event implemented so that when the page is posted back we can double check on whether the input is proper or not. Along with this we are also suggested to implement the ASP.NET built-in capability of identifying and filtering malicious input. The main issue occurs here.&lt;/p&gt;

&lt;p&gt;Everything is fine till we constrain the input on the client-side using JavaScript functions. But as the popular suggestion goes we cannot trust the input based only on our validations on client-side. So now when we enable ValidateRequest attribute on the Page directive even before our server side validation of the validators kicks in ASP.NET will identify the malicious input. When it identifies malicious input it actually redirects to an error page which looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://usaipavan.github.io/static/Validate Request.jpg&#34; alt=&#34;Validate Request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Definitely it is possible to gracefully handle this by handling the exception of type HttpRequestValidationException and then redirecting the user to appropriate custom error page. But we have to remember here that most of the users are legitimate and also not giving a chance to the end user to correct his mistake or worst not even telling the user where the mistake is present is not acceptable. Thus we need more fine grained control over how we are going to leverage ASP.NET built-in capability to handle malicious input while allowing our server side validations to run and check for error before ASP.NET validation kicks in.&lt;/p&gt;

&lt;p&gt;Before discussing the strategy on implementing solution for above problem we will first have to understand how setting the attribute ValidateRequest will actually work. If you are aware of the Page life cycle, one of the very early events that is fired is ProcessRequest of the PageHandlerFactory. PageHandlerFactory is the default HttpHandler for the ASP.NET files. In this ProcessRequest  the method Request.ValidateInput() is called. Here is an excellent blog on the inner working of ValidateInput method. This method actually sets flags which will suggest whether the following inputs coming from the client side are actually proper viz., Form data, Cookies, QueryString. Please remember that calling that method does not raise an HttpRequestValidationException, we have access the collection which actually has malicious input for the exception to be raised.&lt;/p&gt;

&lt;p&gt;Thus by setting ValidateRequest as false in Page directive and then calling this method in Page load we would gain control over the ASP.NET validation. Now we can call the Page.Validate() to trigger server side validation and if page is invalid simply return to the end-user suggesting the problem with their input. In a scenario where our validation fails as a next line of defense we would access the collections of forms, query string and cookies so that since ValidateInput has already set the flags accessing any one of the above which are having an issue will raise an exception. Thus, we can ensure that Server side validation is done while not compromising on ASP.NET built-in validation. Here is the sample code for the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;
protected void Page_Load(object sender, EventArgs e)
{
    try {
        if (Page.IsPostBack)
        {
            Request.ValidateInput();

            Page.Validate();
            if (!Page.IsValid)
            {
                return;
            }

            NameValueCollection formsCollection = Request.Form;
            NameValueCollection queryStringCollection = Request.QueryString;
            HttpCookieCollection cookiesCollection = Request.Cookies;
        }
    }
    catch (HttpRequestValidationException)
    {
        Response.Redirect(&amp;quot;MaliciousInputError.html&amp;quot;);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, I have seen developers who just started their career in .net worrying about the return statement in the Page_Load event. I want to clarify here that with the return statement we only come out from page load event, rest of the page lifecycle will be intact.&lt;/p&gt;

&lt;p&gt;Hope you people will find this useful.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>