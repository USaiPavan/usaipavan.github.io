<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sai Pavan&#39;s blog</title>
    <link>https://usaipavan.github.io/tags/c</link>
    <description>Recent content on Sai Pavan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2016 Sai Pavan.</copyright>
    <atom:link href="https://usaipavan.github.io/tags/c" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The mystery around DbEntityEntry.State</title>
      <link>https://usaipavan.github.io/2016/07/the-mystery-around-dbentityentry-state/</link>
      <pubDate>Wed, 06 Jul 2016 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2016/07/the-mystery-around-dbentityentry-state/</guid>
      <description>&lt;p&gt;While playing around with EF DbContext ChangeTracker API I happened to observe an interesting behavior of DbContext.Entry().State. I will be using AdventureWorks database with Code First from database for this blog post. Initially I have obtained a row using the Find method on the Addresses entity. Now I have called the Entry method on the DbContext to obtain the DbEntityEntry&amp;lt; Address &amp;gt; and accessed the State property on the same. As expected, the State was &amp;ldquo;Unchanged&amp;rdquo;. Now I have modified the AddressLine1 to add some dummy information and tried to get obtain the State again. Here is the code snippet&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var localContext = new AdventureWorksModel();
var firstResult = localContext.Addresses.Find(10);

var entryDetails = localContext.Entry(firstResult);
Console.WriteLine(entryDetails.State);

firstResult.AddressLine1 += &amp;quot;test&amp;quot;;

Console.WriteLine(entryDetails.State);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you think the result would have been?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Unchanged
Unchanged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My initial thoughts were since the call to Entry method was creating a new object there is no way this object would have any idea and all was good. However, I happened to call localContext.Entry(firstResult) and then tried to access entryDetails.State. Before I reveal the result. Here is the code. Give it a guess&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var localContext = new AdventureWorksModel();
var firstResult = localContext.Addresses.Find(10);

var entryDetails = localContext.Entry(firstResult);
Console.WriteLine(entryDetails.State);

firstResult.AddressLine1 += &amp;quot;test&amp;quot;;


Console.WriteLine(entryDetails.State);
Console.WriteLine(localContext.Entry(firstResult).State);
Console.WriteLine(entryDetails.State);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Unchanged
Unchanged
Modified
Modified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this was a surprise for me, if both the instances were different then how come one affected the other. Were they the same? I confirmed that they weren&amp;rsquo;t&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Console.WriteLine(localContext.Entry(firstResult) == entryDetails);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It triggered my curiosity and I decided to dig into EntityFramework.dll to get my answers. I used dotPeek to be able to decompile the same&lt;/p&gt;

&lt;p&gt;Looks like the Entry method on the DbContext internally calls DetectChanges() with force option true which will cause the ObjectStateManager to refresh and detect that the changes have been made. However, by just calling State property again on the existing DbEntityEntry won&amp;rsquo;t help because though it uses ObjectStateManager behind the scenes the DetectChanges hasn&amp;rsquo;t been called and hence the details won&amp;rsquo;t be updated. Below are the screenshots of the code and the debugging state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://usaipavan.github.io/20160706-DetectChangesOnCallingEntryMethod.JPG&#34; alt=&#34;Entry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://usaipavan.github.io/20160706-StatePropertyAccessingInternalContext.png&#34; alt=&#34;Context&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also, by calling DetectChanges on the DbContext.ChangeTracker, we can ensure that the existing DbEntityEntry is updated&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var localContext = new AdventureWorksModel();
var firstResult = localContext.Addresses.Find(10);

var entryDetails = localContext.Entry(firstResult);
Console.WriteLine(entryDetails.State);

firstResult.AddressLine1 += &amp;quot;test&amp;quot;;

localContext.ChangeTracker.DetectChanges();


Console.WriteLine(entryDetails.State);
Console.WriteLine(localContext.Entry(firstResult).State);
Console.WriteLine(entryDetails.State);

Console.WriteLine(localContext.Entry(firstResult) == entryDetails);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Simpler way to convert Nullable type to Value type</title>
      <link>https://usaipavan.github.io/2016/03/simpler-way-to-convert-nullable-type-to-value-type/</link>
      <pubDate>Fri, 18 Mar 2016 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2016/03/simpler-way-to-convert-nullable-type-to-value-type/</guid>
      <description>&lt;p&gt;The more we work with databases, more is the need for &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx&#34;&gt;nullable types&lt;/a&gt;. This is because of the inherent difference between the way value types are treated in object oriented world and the relational world. In the object oriented world the value types always have a value either the one that we assign or the one that is the default value. However, in the database world they are treated differently. They are assigned as a data type for a column and it is possible that the column has a value of the column could have NULL (obviously, not in case of NOT NULL columns). Now when this is to be translated back into object oriented languages like C# resort to something like nullable types. ORMs like Entity Framework also use a similar approach.&lt;/p&gt;

&lt;p&gt;Now when these values have to be converted from Nullable value types to normal C# value types we have to be careful in not running into InvalidOperationException&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Following line of code throws a InvalidOperationException
// with message as
// Nullable object must have a value.
DateTime? sourceValue = null;
DateTime destinationValue = sourceValue.Value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to be able to avoid such an issue we must then resort to a HasValue check and when the value exists it will have to be assigned by calling the Value property of the nullable type otherwise we will assign the default value of that particular type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;DateTime? sourceValue = null;
DateTime destinationValue;
if (sourceValue.HasValue)
{
    destinationValue = sourceValue.Value;   
}
else
{
    destinationValue = default(DateTime);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code is very verbose and if we have to resort to writing this kind of code for every nullable type to value type conversion in our code it quickly starts to become cumbersome. &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb383977.aspx&#34;&gt;Extension methods&lt;/a&gt; have come to my rescue to be able to solve this issue in a more cleaner way. I have written an &lt;a href=&#34;http://stackoverflow.com/questions/4928810/how-do-i-write-an-extension-method-for-a-generic-type-with-constraints-on-type-p&#34;&gt;generic extension&lt;/a&gt; method on Nullable&lt;T&gt; such that it will take the nullable value type and checks for HasValue. In case it has a value then the Value property will be returned. Otherwise, default value of that particular value type will be returned&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class MyExtensions
{
    // Generic extension method which checks for HasValue and based on that
    // will return a value
    public static T ToValueType&amp;lt;T&amp;gt;(this Nullable&amp;lt;T&amp;gt; inputValue) where T : struct
    {
        if (inputValue.HasValue)
        {
            return inputValue.Value;
        }
        return default(T);
    }
}

void Main()
{
    //Extension method usage
    DateTime? sourceValue = null;
    DateTime destinationValue;
    destinationValue = sourceValue.ToValueType();

    Console.WriteLine($&amp;quot;Destination value for datetime is : {destinationValue} &amp;quot;);
    
    int? sourceIntValue = 1;
    int destinationIntValue;
    destinationIntValue = sourceIntValue.ToValueType();
    
    Console.WriteLine($&amp;quot;Destination value for datetime is : {destinationIntValue} &amp;quot;);
}

// Result is as follows
// Destination value for datetime is : 1/1/0001 12:00:00 AM 
// Destination value for datetime is : 1 

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Trim extra spaces in strings on objects recursively</title>
      <link>https://usaipavan.github.io/2016/02/trim-extra-spaces-object-recursively/</link>
      <pubDate>Sat, 27 Feb 2016 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2016/02/trim-extra-spaces-object-recursively/</guid>
      <description>&lt;p&gt;Many of us might have had requirement to be able to trim extra spaces in strings on custom classes that we have created, at some point in our career.These extra spaces in strings might have come from a database or maybe from an external system. These not only cause waste of bandwidth but also causes the problem in terms of  comparison. Especially when working on APIs that will be used by mobile applications every byte that is being sent across the wire matters.&lt;/p&gt;

&lt;p&gt;I was in a similar scenario where we were sending JSON data to client application and we had to ensure that data being sent to application has as much low memory footprint as possible.When trying to trim spaces in the strings it was easy for custom classes which only had primitive types in them. However, it gets complicated as the custom classes start having complex objects. It gets more tricky when there are list of objects inside these custom classes. The solution that I could come up with was using reflection and recursion to achieve the final result. After a few iterations and clarifications on &lt;a href=&#34;http://stackoverflow.com/questions/35234810/trim-spaces-in-a-object-recursively-using-reflection&#34;&gt;StackOverflow&lt;/a&gt; here is the final solution.&lt;/p&gt;

&lt;p&gt;I have created an extension method on object which handles a generic parameter. As a first step I have first trimmed all the strings at the object level. I have done this using reflection and link where we will identify all the strings and just trim the spaces on them which is symbol.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//Iterates all properties and trims the values if they are strings
var properties = obj.GetType().GetProperties(BindingFlags.Instance |    BindingFlags.Public)
    .Where(prop =&amp;gt; prop.PropertyType == typeof(string))
    .Where(prop =&amp;gt; prop.CanWrite &amp;amp;&amp;amp; prop.CanRead);

foreach (var property in properties)
{
    var value = (string) property.GetValue(obj, null);
    if (value.HasValue())
    {
    var newValue = (object) value.Trim();
    property.SetValue(obj, newValue, null);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a next step I tried to take care of all the list of objects so that they can each be operated individually and spaces can be trimmed on them. To be able to achieve this I have relied on recursion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This is to take care of Lists. This iterates through each value
// in the list.
// For example, Countries which is a List&amp;lt;Country&amp;gt;
var baseTypeInfo = obj.GetType().BaseType;
if (baseTypeInfo != null &amp;amp;&amp;amp; baseTypeInfo.FullName.Contains(&amp;quot;List&amp;quot;))
{
    var listCount = (int) obj.GetType().GetProperty(&amp;quot;Count&amp;quot;).GetValue(obj, null);
    for (var innerIndex = 0; innerIndex &amp;lt; listCount; innerIndex++)
    {
        var item = obj.GetType().GetMethod(&amp;quot;get_Item&amp;quot;, new[] {typeof(int)}).Invoke(obj, new object[] {innerIndex});
        item.TrimSpaces(); // Recursive call
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now as the last step I have taken care of other custom objects inside the object so that  also be taken care of item in the spaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    // Now once we are in a complex type (for example Country) it then needs to
    // be trimmed recursively using the initial peice of code of this method
    // Hence if it is a complex type we are recursively calling TrimSpaces
    var customTypes =
    obj.GetType()
       .GetProperties(BindingFlags.Instance | BindingFlags.Public)
       .Where(prop =&amp;gt; !prop.GetType().IsPrimitive &amp;amp;&amp;amp; prop.GetType().IsClass &amp;amp;&amp;amp; !prop.PropertyType.FullName.StartsWith(&amp;quot;System&amp;quot;));
    
    foreach (var customType in customTypes.Where(customType =&amp;gt; 
            customType.GetIndexParameters().Length == 0))
            customType.GetValue(obj).TrimSpaces();
    
    return obj;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution is available on &lt;a href=&#34;https://github.com/USaiPavan/BlogPostCode/tree/master/TrimSpacesRecursively&#34;&gt;github&lt;/a&gt; and can be used in any of the projects which require the capability of trimming of objects&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sorting a custom list without LINQ</title>
      <link>https://usaipavan.github.io/2015/10/sorting-custom-list-without-linq/</link>
      <pubDate>Fri, 09 Oct 2015 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2015/10/sorting-custom-list-without-linq/</guid>
      <description>&lt;p&gt;As much as we want to work on latest and greatest technologies sometimes we end up working on older technologies. This becomes especially tough when we have already worked on latest technologies. One such examples is LINQ.&lt;/p&gt;

&lt;p&gt;LINQ has made life of developers so easy that it feels wierd how we used to do stuff like filtering and other actions on collections without using LINQ. Recently I came across a scenario where I had to sort a custom type list based on varoius properties in it. However, I was working on .Net 2.0 and as we all know we didn&amp;rsquo;t have LINQ back then. Hence I was stuck with using whatever was available in .Net 2.0&lt;/p&gt;

&lt;p&gt;There were quite a few options before me but I chose the simplest one which is using &lt;em&gt;Array.Sort()&lt;/em&gt; method which is &lt;em&gt;aware&lt;/em&gt; of sorting all the primitive data types. Luckily my custom type was made up of primitive data types&lt;/p&gt;

&lt;p&gt;So here is the code that I have written to be able to achieve that feat..&lt;/p&gt;

&lt;p&gt;First my custom type (obviously different from what I have worked on but is similar)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class TrainingEmployee
{
    public int Count { get; set; }        
    public string TrainingTypeName { get; set; }
    public string LocationName { get; set; }
    public string DueStatus { get; set; }
    public string EmployeeNumber { get; set; }
    public string EmployeeName { get; set; }                
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now easier way to sort the custom type list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void BuildAndSortEmployees()
{
    List&amp;lt;TrainingEmployee&amp;gt; employees = new List&amp;lt;TrainingEmployee&amp;gt;();
    employees.Add(new TrainingEmployee
    {
        Count = 10,
        DueStatus = &amp;quot;Due&amp;quot;,
        EmployeeName = &amp;quot;Tom&amp;quot;,
        EmployeeNumber = &amp;quot;2&amp;quot;,
        LocationName = &amp;quot;Hogwarts&amp;quot;,
        TrainingTypeName = &amp;quot;bca&amp;quot;
    });
    employees.Add(new TrainingEmployee
    {
        Count = 5,
        DueStatus = &amp;quot;Due&amp;quot;,
        EmployeeName = &amp;quot;Riddle&amp;quot;,
        EmployeeNumber = &amp;quot;12&amp;quot;,
        LocationName = &amp;quot;DiagonAlley&amp;quot;,
        TrainingTypeName = &amp;quot;bca&amp;quot;
    });
    employees.Add(new TrainingEmployee
    {
        Count = 8,
        DueStatus = &amp;quot;Due&amp;quot;,
        EmployeeName = &amp;quot;Lord&amp;quot;,
        EmployeeNumber = &amp;quot;22&amp;quot;,
        LocationName = &amp;quot;PrivetDrive&amp;quot;,
        TrainingTypeName = &amp;quot;bca&amp;quot;
    });
    employees.Add(new TrainingEmployee
    {
        Count = 12,
        DueStatus = &amp;quot;Due&amp;quot;,
        EmployeeName = &amp;quot;Voldemort&amp;quot;,
        EmployeeNumber = &amp;quot;8&amp;quot;,
        LocationName = &amp;quot;TestLocation&amp;quot;,
        TrainingTypeName = &amp;quot;bca&amp;quot;
    });

    employees.Sort((x, y) =&amp;gt;
    {
        var ret = x.EmployeeName.CompareTo(y.EmployeeName);
        return ret;
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;EmployeeName&lt;/em&gt; property can be literally be replaced with any of the properties in the TrainingEmployee class and the sort just works. Here we are using the Array.Sort and also using the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.icomparable.compareto(v=vs.110).aspx&#34;&gt;CompareTo&lt;/a&gt; we are comparing the primitive data types. This won&amp;rsquo;t work out of the box for custom data types, if any, in &lt;em&gt;TrainingEmployee&lt;/em&gt; class but requires a EqualityComparer implementation of the custom data type&lt;/p&gt;

&lt;p&gt;That is it. It is a short post on how to do sorting of custom types without using LINQ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practical implementation of fix for XSS vulnerability</title>
      <link>https://usaipavan.github.io/2012/01/practical-implementation-of-fix-for-xss-vulnerability/</link>
      <pubDate>Thu, 05 Jan 2012 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2012/01/practical-implementation-of-fix-for-xss-vulnerability/</guid>
      <description>&lt;p&gt;In this post, I am going to discuss about the practical way of fixing the XSS vulnerability in ASP.NET applications. An introduction about XSS vulnerability can be found here. So, why I chose to write this blog post. I happened to see quite a few blog posts and sites which discuss about fixing the XSS vulnerability by constraining the input and encoding the output. But, I felt that there is a gap between practical implementation of the suggestion and what is written in the web sites.&lt;/p&gt;

&lt;p&gt;Now lets discuss briefly about how we would be going ahead and fixing this issue. As this &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff649310.aspx&#34;&gt;link&lt;/a&gt; suggests the simple approach for this security vulnerability is constrain the input and encode the output. Its simple when on an article but during implementation we will face some issues. I will put forward one such issue. Lets go ahead with the suggestion of constraining the input. Following the basic rule of implementing Regex/Custom validator with ClientScript enabled and having the ServerValidate event implemented so that when the page is posted back we can double check on whether the input is proper or not. Along with this we are also suggested to implement the ASP.NET built-in capability of identifying and filtering malicious input. The main issue occurs here.&lt;/p&gt;

&lt;p&gt;Everything is fine till we constrain the input on the client-side using JavaScript functions. But as the popular suggestion goes we cannot trust the input based only on our validations on client-side. So now when we enable ValidateRequest attribute on the Page directive even before our server side validation of the validators kicks in ASP.NET will identify the malicious input. When it identifies malicious input it actually redirects to an error page which looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://usaipavan.github.io/static/Validate Request.jpg&#34; alt=&#34;Validate Request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Definitely it is possible to gracefully handle this by handling the exception of type HttpRequestValidationException and then redirecting the user to appropriate custom error page. But we have to remember here that most of the users are legitimate and also not giving a chance to the end user to correct his mistake or worst not even telling the user where the mistake is present is not acceptable. Thus we need more fine grained control over how we are going to leverage ASP.NET built-in capability to handle malicious input while allowing our server side validations to run and check for error before ASP.NET validation kicks in.&lt;/p&gt;

&lt;p&gt;Before discussing the strategy on implementing solution for above problem we will first have to understand how setting the attribute ValidateRequest will actually work. If you are aware of the Page life cycle, one of the very early events that is fired is ProcessRequest of the PageHandlerFactory. PageHandlerFactory is the default HttpHandler for the ASP.NET files. In this ProcessRequest  the method Request.ValidateInput() is called. Here is an excellent blog on the inner working of ValidateInput method. This method actually sets flags which will suggest whether the following inputs coming from the client side are actually proper viz., Form data, Cookies, QueryString. Please remember that calling that method does not raise an HttpRequestValidationException, we have access the collection which actually has malicious input for the exception to be raised.&lt;/p&gt;

&lt;p&gt;Thus by setting ValidateRequest as false in Page directive and then calling this method in Page load we would gain control over the ASP.NET validation. Now we can call the Page.Validate() to trigger server side validation and if page is invalid simply return to the end-user suggesting the problem with their input. In a scenario where our validation fails as a next line of defense we would access the collections of forms, query string and cookies so that since ValidateInput has already set the flags accessing any one of the above which are having an issue will raise an exception. Thus, we can ensure that Server side validation is done while not compromising on ASP.NET built-in validation. Here is the sample code for the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;protected void Page_Load(object sender, EventArgs e)
{
    try {
        if (Page.IsPostBack)
        {
            Request.ValidateInput();

            Page.Validate();
            if (!Page.IsValid)
            {
                return;
            }

            NameValueCollection formsCollection = Request.Form;
            NameValueCollection queryStringCollection = Request.QueryString;
            HttpCookieCollection cookiesCollection = Request.Cookies;
        }
    }
    catch (HttpRequestValidationException)
    {
        Response.Redirect(&amp;quot;MaliciousInputError.html&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, I have seen developers who just started their career in .net worrying about the return statement in the Page_Load event. I want to clarify here that with the return statement we only come out from page load event, rest of the page lifecycle will be intact.&lt;/p&gt;

&lt;p&gt;Hope you people will find this useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DateTime vs. StopWatch</title>
      <link>https://usaipavan.github.io/2012/01/datetime-vs-stopwatch/</link>
      <pubDate>Tue, 03 Jan 2012 09:00:00 -0500</pubDate>
      
      <guid>https://usaipavan.github.io/2012/01/datetime-vs-stopwatch/</guid>
      <description>&lt;p&gt;Today I was trying to measure performance of an extension method that I have written on a DataSet. Basically, the extension method loops through all the DataTables. On each  DataTable it iterates through all the rows (including the column names) and encodes all the strings using the HttpUtility.HtmlEncode method. This is to make sure that we are protecting our site from XSS attack (more about prevention of XSS attacks in ASP.NET are &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff649310.aspx&#34;&gt;here&lt;/a&gt;). I had to do this without effecting the current performance of the website.&lt;/p&gt;

&lt;p&gt;Now, I had to somehow measure and I was using Debug.WriteLine method to log the details. First off I started with DateTime.Now, storing it in a variable and then after the processing was done subtracting it from the current DateTime (DateTime.Now) and taking the milliseconds elapsed in the resulting TimeSpan surprised me. I was sure that there was time consumption for that task but the output window was showing zero milliseconds. After couple of tries I resorted to StopWatch class. The usual Start and Stop methods before and after the task were now actually showing me the correct details. It was accurate to the Tick.&lt;/p&gt;

&lt;p&gt;So my today’s learning, for accuracy and performance measurements depend only on StopWatch class :-). Might have learned it late but as the saying goes “Better late than never”. Hope it helps some one.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>